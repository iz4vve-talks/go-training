Let's Go!
Optum Ireland
2 Nov 2018
Tags: optum, europython, python, 2018

Pietro Mascolo
#Senior Data Scientist - Optum
pietro_mascolo@optum.com
@iz4vve

*Slides*and*code*: [[https://bit.ly/2OcZThG]]


###############################################################
* What is Go?

Go is a *compiled*, *concurrent*, *garbage-collected*, *statically*typed* language developed at Google.
 
It is an open source project: Google imports the public repository rather than the other way around. 

According to the Go team at Google:

  The Go programming language was conceived in late 2007 as an answer to some of the problems 
  we were seeing developing software infrastructure at Google. 
  [...] 
  The problems introduced by multicore processors, networked systems, 
  massive computation clusters, and the web programming model were being worked around 
  rather than addressed head-on. 
  Moreover, the scale has changed: today's server programs comprise tens of millions 
  of lines of code, are worked on by hundreds or even thousands of programmers, 
  and are updated literally every day. 
  To make matters worse, build times, even on large compilation clusters, have stretched 
  to many minutes, even hours. 


###############################################################
* Language Semantics

.html code/spacer.html
.html code/spacer.html


- C-like syntax;
- No pointer arithmetic;
- No implicit numeric conversions;
- there are no type aliases (after '`type`X`int`', `X` and `int` are distinct types);
- ...


###############################################################
* Some key features

.html code/spacer.html
.html code/spacer.html


- Concurrency support out of the box (no libraries needed);
- garbage collection and no manual memory management (unless you use the `unsafe` package);
- interface types provide runtime polymorphism;
- reflection;
- type switches.

###############################################################
* The syntax

###############################################################
* Declaring variables

.play code/go/variables.go


###############################################################
* Data structures

Go is very simple: it only gives you 3 data structures (for efficiency, you rarely need more):

- arrays;
- slices;
- maps.

###############################################################
* Functions 1/2

.html code/spacer.html

Functions are introduced by the keyword `func`.

    // documentation...
    func add(x int, y int) int {
        return x + y
    }

    // function with named return
    func named(x int, y int) (sum int) {
        sum = x + y
        // sum is specified as the return variable in the function signature
        return
    }

* Functions 2/2

.html code/spacer.html

A typical function in Go returns a value and an error object (more on this in error handling)

    func doSomething(x io.Reader) ([]byte, error) {
        if !everythingsOk() {
            return []byte{}, errors.New("Damn!")
        }

        ...
        // happy return
        return ret, nil
    }

###############################################################
* Structs

.html code/spacer.html

Used to define more complex data structures (useful to group logical concepts).

: We can use the struct literal form to initialize a value from a struct type.
: The dot (.) operator allows us to access individual field values.
: We can create anonymous structs.

    // Documentation...
    type Employee struct {
        EmployeeID string
        Name       string
        LastName   string
        age        int     // unexported (private)
        salary     int     // unexported (private)
    }

    

###############################################################
* Pointers

###############################################################
* Error handling

###############################################################
* Control flow

###############################################################
* Loop (yeah, there is only one...)

###############################################################
* Concurrency

###############################################################
* Concurrency model (CSP)

###############################################################
* Goroutines

###############################################################
* Channels

###############################################################
* Why Go?

* Benchmark - Go (1/3)
.html code/spacer.html
.code code/benchmark/go_bench.go

* Banchmark - Python (2/3)
.html code/spacer.html
.code code/benchmark/python_bench.py

* Benchmark - comparison (3/3)
.html code/spacer.html
.play code/benchmark/run_benchmark.sh

###############################################################
* Demos
    