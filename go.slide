Let's Go!
Optum Ireland
2 Nov 2018
Tags: optum, europython, python, 2018

Pietro Mascolo
#Senior Data Scientist - Optum
pietro_mascolo@optum.com
@iz4vve

*Slides*and*code*: [[https://bit.ly/2OcZThG]]


###############################################################
* What is Go?

Go is a *compiled*, *concurrent*, *garbage-collected*, *statically*typed* language developed at Google.
 
It is an open source project: Google imports the public repository rather than the other way around. 

According to the Go team at Google:

  The Go programming language was conceived in late 2007 as an answer to some of the problems 
  we were seeing developing software infrastructure at Google. 
  [...] 
  The problems introduced by multicore processors, networked systems, 
  massive computation clusters, and the web programming model were being worked around 
  rather than addressed head-on. 
  Moreover, the scale has changed: today's server programs comprise tens of millions 
  of lines of code, are worked on by hundreds or even thousands of programmers, 
  and are updated literally every day. 
  To make matters worse, build times, even on large compilation clusters, have stretched 
  to many minutes, even hours. 


###############################################################
* Language Semantics

.html code/spacer.html
.html code/spacer.html


- C-like syntax;
- No pointer arithmetic;
- No implicit numeric conversions;
- there are no type aliases (after '`type`X`int`', `X` and `int` are distinct types);
- ...


###############################################################
* Some key features

.html code/spacer.html
.html code/spacer.html


- Concurrency support out of the box (no libraries needed);
- garbage collection and no manual memory management (unless you use the `unsafe` package);
- interface types provide runtime polymorphism;
- reflection;
- type switches.

###############################################################
* The syntax

###############################################################
* Hello, World!

  package main

  import "fmt"

  func main() {
      fmt.Println("Hello, World!")
  }

The program can then be run:

  # direct run
  $ go run hello-world.go
  Hello, World!

  # compilation
  $ go build hello-world.go
  $ ls
  hello-world   hello-world.go
  
  # execution
  $ ./hello-world
  Hello, World!

###############################################################
* Declaring variables

.play code/go/variables.go


###############################################################
* Data structures

Go is very simple: it only gives you 3 data structures (for efficiency, you rarely need more):

- *arrays* (fixed size, immutable);

    array := [4]int{1, 2, 3, 4} 

- *slices* (size not defined, they have a capacity);

    slice := []int{1, 2, 3, 4, 5, 6}
    slice1 := make([]int, 10)  // 10 is the capacity for allocation

- *maps*.

    m := map[string]int{
        "one": 1,
        "two": 2,
    }

###############################################################
* Functions 1/2

.html code/spacer.html

Functions are introduced by the keyword `func`.

    // documentation...
    func add(x int, y int) int {
        return x + y
    }

    // function with named return
    func named(x int, y int) (sum int) {
        sum = x + y
        // sum is specified as the return variable in the function signature
        return
    }

* Functions 2/2

.html code/spacer.html

A typical function in Go returns a value and an error object (more on this in error handling)

    func doSomething(x io.Reader) ([]byte, error) {
        if !everythingsOk() {
            return []byte{}, errors.New("Damn!")
        }

        ...
        // happy return
        return ret, nil
    }

###############################################################
* Structs

.html code/spacer.html

Used to define more complex data structures (useful to group logical concepts).

#: We can use the struct literal form to initialize a value from a struct type.
#: The dot (.) operator allows us to access individual field values.
#: We can create anonymous structs.

    // Documentation...
    type Employee struct {
        EmployeeID string
        Name       string
        LastName   string
        age        int     // unexported (private)
        salary     int     // unexported (private)
    }

###############################################################
* Control flow 1/2

Go has two main control flow statements:

*if/else* (generic control flow):

    if 7%2 == 0 {
        fmt.Println("7 is even")
    } else {
        fmt.Println("7 is odd")
    }


* Control flow 2/2

*switch* (specific set of cases, type assertions, ...):
    
    i := 2
    fmt.Print("Write ", i, " as ")
    switch i {
    case 1:
        fmt.Println("one")
    case 2:
        fmt.Println("two")
    }
    
    // type assertions

    whatAmI := func(i interface{}) {
        switch t := i.(type) {
        case bool:
            fmt.Println("I'm a bool")
        case int:
            fmt.Println("I'm an int")
        default:
            fmt.Printf("Don't know type %T\n", t)
        }
    }

###############################################################
* Loop (yeah, there is only one...)

Go only has a for loop!!

  // C style
  for i := 0; i < 10; i++ {
      // do something
  }

  // while style
  for i < 10 {
      i++
  }

  // while true
  for {
      // runs forever
  }

* Loop with `range`

    // loop over a slice/array
    for index, item := range l {
        // do something
    }

    // loop over a map
    for key, value := range m {
        // do something
    }

    // only key/index
    for i := range x {
        // do something
    }

    // range over a channel (more on this later)
    for v := range ch {
        // do something
    }

###############################################################
* Pointers 1/2

.image  imgs/pointers.PNG _ 700

* Pointer 2/2

.html code/spacer.html

Syntax

    // getting memory address of a variable
    a := 10
    addr := &a  // addr is of type *int

    // dereferencing a pointer (get the value)
    valueOfA := *addr
    

###############################################################
* Error handling

The error type is an interface type (more on this later). An error variable represents any value that can describe itself as a string. Here is the interface's declaration: 

    type error interface {
        Error() string
    }

Go doesn't really have exceptions (with some exceptions...), instead it uses the error type to handle problematic situations.

Typical use:

    result, err := functionThatCanFail()
    if err != nil {
        // handle the error (and exit/fail)
    }
    continueIfNoError()

###############################################################
* Advanced topics

###############################################################
* Interfaces

They provide runtime polymorphism by describing behaviours through the methods a type is required to have.

Keep your interfaces small and specific:

*DO*

    type Reader {
        Read(p []byte) (int, error)
    }

*DON'T*

    type FileReader interface {
        Create(name string) (*File, error)
        NewFile(fd uintptr, name string) *File
        Open(name string) (*File, error)
        OpenFile(name string, flag int, perm FileMode) (*File, error)
    }

: Reader can represent any type that can be read (a file, stdout, a network connection, ...).
: Filereader is not very useful: it's exactly the signature of the `os.File` type...

###############################################################
* Concurrency - the model (CSP)  1/2

.html code/spacer.html
.html code/spacer.html
.image imgs/processes.jpeg _ 700

###############################################################
* Concurrency - in Go  2/2

.image imgs/concurrency.jpg _ 950

###############################################################
* Goroutines

Goroutines are essentially lightweight threads. They are designed so that thousands of them can act concurrently on a single system.

The function:
.code code/go/goroutines.go /START FUNC OMIT/,/END FUNC OMIT/

How to launch:
.play code/go/goroutines.go /START MAIN OMIT/,/END MAIN OMIT/

: Initial stack is 2Kb, as oppoed to 4Mb for normal threads
: their stack size can increase/decrease based on necessity.

###############################################################
* Channels 1/2

Channels are a typed conduit through which you can send and receive values with the channel operator, `<-`.

    ch <- v    // Send v to channel ch.
    v := <-ch  // Receive from ch, and
               // assign value to v.

The data flows in the direction of the arrow.
Like maps and slices, channels must be created before use:

    ch := make(chan int)

By default, sends and receives block until the other side is ready. This allows goroutines to synchronize without explicit locks or condition variables. 

###############################################################
* Channels - Buffered/Unbuffered 2/2

.image imgs/channels.jpg _ 950


###############################################################
* Tooling

###############################################################
* Why Go?

* Benchmark - Go (1/3)
.html code/spacer.html
.code code/benchmark/go_bench.go

* Banchmark - Python (2/3)
.html code/spacer.html
.code code/benchmark/python_bench.py

* Benchmark - comparison (3/3)
.html code/spacer.html
.play code/benchmark/run_benchmark.sh


###############################################################
* Go Proverbs (useful/interesting in any language)

.html code/spacer.html
.html code/spacer.html

    Don't communicate by sharing memory, share memory by communicating.
    Concurrency is not parallelism.
    The bigger the interface, the weaker the abstraction.
    interface{} says nothing.
    Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.
    A little copying is better than a little dependency.
    Clear is better than clever.
    Reflection is never clear.
    Errors are values.
    Don't just check errors, handle them gracefully.
    Design the architecture, name the components, document the details.
    Documentation is for users.
    Don't panic.

###############################################################
* Demos

- Job dispatcher
- ...

###############################################################
* Resources

- gobyexample.com
- tour.golang.org
- golang.org/doc/effective_go.html
